"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.EssentialProposal = exports.VoteOption = void 0;
const buffer_1 = require("buffer/");
const bintools_1 = __importDefault(require("../../../utils/bintools"));
const serialization_1 = require("../../../utils/serialization");
const common_1 = require("../../../common");
/**
 * @ignore
 */
const bintools = bintools_1.default.getInstance();
const serialization = serialization_1.Serialization.getInstance();
class VoteOption extends common_1.NBytes {
    clone() {
        let newbase = new VoteOption();
        newbase.fromBuffer(this.toBuffer());
        return newbase;
    }
    create() {
        return new VoteOption();
    }
    /**
     * VoteOption for a [[Tx]]
     */
    constructor() {
        super();
        this._typeName = "VoteOption";
        this._typeID = undefined;
        //serialize and deserialize both are inherited
        this.bytes = buffer_1.Buffer.alloc(8);
        this.bsize = 8;
    }
}
exports.VoteOption = VoteOption;
class EssentialProposal {
    constructor(start, end) {
        this.start = buffer_1.Buffer.alloc(8);
        this.end = buffer_1.Buffer.alloc(8);
        this.numOptions = buffer_1.Buffer.alloc(4);
        this.start = start;
        this.end = end;
        this.options = [];
    }
    getStart() {
        return this.start;
    }
    getEnd() {
        return this.end;
    }
    getOptions() {
        return this.options;
    }
    /**
     * Adds a option to the proposal and returns the index off the added option.
     */
    addOption(option) {
        this.options.push(option);
        if (this.options) {
            this.numOptions.writeUInt32BE(this.options.length, 0);
        }
        return this.options.length - 1;
    }
    serialize(encoding = "hex") {
        let fields = {
            start: serialization.encoder(this.start, encoding, "Buffer", "number"),
            end: serialization.encoder(this.end, encoding, "Buffer", "number"),
            options: this.options.map((opt) => opt.serialize(encoding))
        };
        return fields;
    }
    deserialize(fields, encoding = "hex") {
        this.start = serialization.decoder(fields["start"], encoding, "number", "Buffer");
        this.end = serialization.decoder(fields["end"], encoding, "number", "Buffer");
        this.numOptions.writeUInt32BE(this.options.length, 0);
        this.options = fields["options"].map((opt) => new VoteOption().deserialize(opt, encoding));
        return this;
    }
    fromBuffer(bytes, offset = 0) {
        this.numOptions = bintools.copyFrom(bytes, offset, offset + 4); // this.numOptions.readUInt32BE(0)
        offset += 4;
        const optionCount = this.numOptions.readUInt32BE(0);
        this.options = [];
        for (let i = 0; i < optionCount; i++) {
            const option = new VoteOption();
            offset = option.fromBuffer(bytes, offset);
            this.options.push(option);
        }
        this.start = bintools.copyFrom(bytes, offset, offset + 8);
        offset += 8;
        this.end = bintools.copyFrom(bytes, offset, offset + 8);
        offset += 8;
        return offset;
    }
    /**
     * Returns a {@link https://github.com/feross/buffer|Buffer} representation of the [[BaseProposal]].
     */
    toBuffer() {
        const barr = [this.numOptions];
        let bsize = this.numOptions.length;
        this.options.forEach((opt) => {
            bsize += opt.getSize();
            barr.push(opt.toBuffer());
        });
        barr.push(this.start, this.end);
        bsize += this.start.length + this.end.length;
        return buffer_1.Buffer.concat(barr, bsize);
    }
}
exports.EssentialProposal = EssentialProposal;
//# sourceMappingURL=data:application/json;base64,