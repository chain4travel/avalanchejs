"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GeneralProposal = exports.GeneralVoteOption = void 0;
const buffer_1 = require("buffer/");
const constants_1 = require("../constants");
const serialization_1 = require("../../../utils/serialization");
const bintools_1 = __importDefault(require("../../../utils/bintools"));
const utf8 = "utf8";
const serialization = serialization_1.Serialization.getInstance();
const bintools = bintools_1.default.getInstance();
class GeneralVoteOption extends serialization_1.Serializable {
    serialize(encoding = "hex") {
        super.serialize();
        return {
            option: serialization.encoder(this.option, encoding, "Buffer", "hex")
        };
    }
    deserialize(fields, encoding = "hex") {
        super.deserialize(fields, encoding);
        this.option = serialization.decoder(fields["option"], encoding, "Buffer", "Buffer", 256 //max size
        );
        return this;
    }
    fromBuffer(bytes, offset = 0) {
        let optionLen = bintools
            .copyFrom(bytes, offset, offset + 4)
            .readUInt32BE(0);
        offset += 4;
        this.option = bintools.copyFrom(bytes, offset, offset + optionLen);
        offset += optionLen;
        return offset;
    }
    toBuffer() {
        let barr = [buffer_1.Buffer.alloc(4), this.option];
        let bsize = 4 + this.option.length;
        barr[0].writeUInt32BE(this.option.length, 0);
        return buffer_1.Buffer.concat(barr, bsize);
    }
    getSize() {
        return this.option.length + 4;
    }
    getOption() {
        return this.option;
    }
    constructor(option) {
        super();
        this._typeName = "GeneralVoteOption";
        this._typeID = undefined;
        this.option = buffer_1.Buffer.alloc(0);
        if (option)
            this.option = option;
    }
}
exports.GeneralVoteOption = GeneralVoteOption;
class GeneralProposal {
    addGeneralOption(option) {
        const generalVoteOption = new GeneralVoteOption(buffer_1.Buffer.from(option));
        this.options.push(generalVoteOption);
        if (this.options) {
            this.numOptions.writeUInt32BE(this.options.length, 0);
        }
        return this.options.length - 1;
    }
    serialize(encoding = "hex") {
        let fields = {
            start: serialization.encoder(this.start, encoding, "Buffer", "number"),
            end: serialization.encoder(this.end, encoding, "Buffer", "number"),
            options: this.options.map((opt) => opt.serialize(encoding)),
            totalVotedThresholdNominator: serialization.encoder(this.totalVotedThresholdNominator, encoding, "Buffer", "number"),
            mostVotedThresholdNominator: serialization.encoder(this.mostVotedThresholdNominator, encoding, "Buffer", "number"),
            allowEarlyFinish: this.allowEarlyFinish
        };
        return fields;
    }
    deserialize(fields, encoding = "hex") {
        this.numOptions.writeUInt32BE(this.options.length, 0);
        this.options = fields["options"].map((opt) => new GeneralVoteOption().deserialize(opt, encoding));
        this.start = serialization.decoder(fields["start"], encoding, "number", "Buffer");
        this.end = serialization.decoder(fields["end"], encoding, "number", "Buffer");
        this.totalVotedThresholdNominator = serialization.decoder(fields["totalVotedThresholdNominator"], encoding, "number", "Buffer");
        this.mostVotedThresholdNominator = serialization.decoder(fields["mostVotedThresholdNominator"], encoding, "number", "Buffer");
        this.allowEarlyFinish = serialization.decoder(fields["allowEarlyFinish"], encoding, "number", "Buffer");
        return this;
    }
    fromBuffer(bytes, offset = 0) {
        this.numOptions = bintools.copyFrom(bytes, offset, offset + 4); // this.numOptions.readUInt32BE(0)
        offset += 4;
        const optionCount = this.numOptions.readUInt32BE(0);
        this.options = [];
        for (let i = 0; i < optionCount; i++) {
            const option = new GeneralVoteOption();
            offset = option.fromBuffer(bytes, offset);
            this.options.push(option);
        }
        this.start = bintools.copyFrom(bytes, offset, offset + 8);
        offset += 8;
        this.end = bintools.copyFrom(bytes, offset, offset + 8);
        offset += 8;
        this.totalVotedThresholdNominator = bintools.copyFrom(bytes, offset, offset + 8);
        offset += 8;
        this.mostVotedThresholdNominator = bintools.copyFrom(bytes, offset, offset + 8);
        offset += 8;
        this.allowEarlyFinish = bintools.copyFrom(bytes, offset, offset + 1)[0] != 0;
        offset += 1;
        return offset;
    }
    toBuffer() {
        let barr = [this.numOptions];
        let bsize = this.numOptions.length;
        this.options.forEach((opt) => {
            let optBuffer = opt.toBuffer();
            barr.push(optBuffer);
            bsize += optBuffer.length;
        });
        barr.push(this.start, this.end, this.totalVotedThresholdNominator, this.mostVotedThresholdNominator, buffer_1.Buffer.from([this.allowEarlyFinish ? 1 : 0]));
        bsize +=
            this.start.length +
                this.end.length +
                this.totalVotedThresholdNominator.length +
                this.mostVotedThresholdNominator.length +
                1;
        return buffer_1.Buffer.concat(barr, bsize);
    }
    constructor(start, end, totalVotedThresholdNominator, mostVotedThresholdNominator, allowEarlyFinish) {
        this._typeID = constants_1.PlatformVMConstants.GENERALPROPOSAL_TYPE_ID;
        // The order is important, must be followed in functions
        this.numOptions = buffer_1.Buffer.alloc(4); //1.
        this.start = buffer_1.Buffer.alloc(8); //3.
        this.end = buffer_1.Buffer.alloc(8); //4.
        this.totalVotedThresholdNominator = buffer_1.Buffer.alloc(8); //5.
        this.mostVotedThresholdNominator = buffer_1.Buffer.alloc(8); //6.
        const startTime = buffer_1.Buffer.alloc(8); // Buffer to hold the start time, 8 bytes
        startTime.writeUInt32BE(start, 4);
        const endTime = buffer_1.Buffer.alloc(8); // Buffer to hold the end time, 8 bytes
        endTime.writeUInt32BE(end, 4);
        this.options = [];
        this.start = startTime;
        this.end = endTime;
        this.totalVotedThresholdNominator = buffer_1.Buffer.alloc(8);
        this.totalVotedThresholdNominator.writeUInt32BE(totalVotedThresholdNominator, 0);
        this.mostVotedThresholdNominator = buffer_1.Buffer.alloc(8);
        this.mostVotedThresholdNominator.writeUInt32BE(mostVotedThresholdNominator, 0);
        this.allowEarlyFinish = allowEarlyFinish;
    }
    getTypeID() {
        return this._typeID;
    }
    getAllowEarlyFinish() {
        return this.allowEarlyFinish;
    }
}
exports.GeneralProposal = GeneralProposal;
//# sourceMappingURL=data:application/json;base64,