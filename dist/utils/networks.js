"use strict";
/**
 * @packageDocumentation
 * @module Utils-Networks
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const bn_js_1 = __importDefault(require("bn.js"));
const constants_1 = require("./constants");
const TestNetwork = {
    preDefined: true,
    hrp: constants_1.TestHRP,
    X: {
        blockchainID: constants_1.TestXBlockchainID,
        alias: constants_1.XChainAlias,
        vm: constants_1.XChainVMName,
        avaxAssetID: constants_1.TestAvaxAssetID,
        avaxAssetAlias: "AVAX",
        txFee: constants_1.MILLIAVAX,
        creationTxFee: constants_1.CENTIAVAX,
        mintTxFee: constants_1.MILLIAVAX
    },
    P: {
        blockchainID: constants_1.DefaultPlatformChainID,
        alias: constants_1.PChainAlias,
        vm: constants_1.PChainVMName,
        txFee: constants_1.MILLIAVAX,
        creationTxFee: constants_1.CENTIAVAX,
        createSubnetTx: constants_1.ONEAVAX,
        createChainTx: constants_1.ONEAVAX,
        minConsumption: 0.1,
        maxConsumption: 0.12,
        maxStakingDuration: new bn_js_1.default(31536000),
        maxSupply: new bn_js_1.default(720000000).mul(constants_1.ONEAVAX),
        minStake: constants_1.ONEAVAX,
        minStakeDuration: 24 * 60 * 60,
        maxStakeDuration: 365 * 24 * 60 * 60,
        minDelegationStake: constants_1.ONEAVAX,
        minDelegationFee: new bn_js_1.default(2),
        verifyNodeSignature: false,
        lockModeBondDeposit: false
    },
    C: {
        blockchainID: constants_1.TestCBlockchainID,
        alias: constants_1.CChainAlias,
        vm: constants_1.CChainVMName,
        txBytesGas: 1,
        costPerSignature: 1000,
        txFee: constants_1.MILLIAVAX,
        gasPrice: constants_1.GWEI.mul(new bn_js_1.default(225)),
        minGasPrice: constants_1.GWEI.mul(new bn_js_1.default(25)),
        maxGasPrice: constants_1.GWEI.mul(new bn_js_1.default(1000)),
        chainID: 43112
    }
};
// Does not support p:getConfiguration
const AvaxMainNetwork = {
    preDefined: true,
    hrp: "avax",
    X: {
        blockchainID: "2oYMBNV4eNHyqk2fjjV5nVQLDbtmNJzq5s3qs3Lo6ftnC6FByM",
        alias: constants_1.XChainAlias,
        vm: constants_1.XChainVMName,
        avaxAssetID: "FvwEAhmxKfeiG8SnEvq42hc6whRyY3EFYAvebMqDNDGCgxN5Z",
        avaxAssetAlias: "AVAX",
        txFee: constants_1.MILLIAVAX,
        creationTxFee: constants_1.CENTIAVAX,
        mintTxFee: constants_1.MILLIAVAX
    },
    P: {
        blockchainID: constants_1.DefaultPlatformChainID,
        alias: constants_1.PChainAlias,
        vm: constants_1.PChainVMName,
        txFee: constants_1.MILLIAVAX,
        creationTxFee: constants_1.CENTIAVAX,
        createSubnetTx: constants_1.ONEAVAX,
        createChainTx: constants_1.ONEAVAX,
        minConsumption: 0.1,
        maxConsumption: 0.12,
        maxStakingDuration: new bn_js_1.default(31536000),
        maxSupply: new bn_js_1.default(720000000).mul(constants_1.ONEAVAX),
        minStake: constants_1.ONEAVAX.mul(new bn_js_1.default(2000)),
        minStakeDuration: 2 * 7 * 24 * 60 * 60,
        maxStakeDuration: 365 * 24 * 60 * 60,
        minDelegationStake: constants_1.ONEAVAX.mul(new bn_js_1.default(25)),
        minDelegationFee: new bn_js_1.default(2),
        verifyNodeSignature: false,
        lockModeBondDeposit: false
    },
    C: {
        blockchainID: "2q9e4r6Mu3U68nU1fYjgbR6JvwrRx36CohpAX5UQxse55x1Q5",
        alias: constants_1.CChainAlias,
        vm: constants_1.CChainVMName,
        txBytesGas: 1,
        costPerSignature: 1000,
        txFee: constants_1.MILLIAVAX,
        gasPrice: constants_1.GWEI.mul(new bn_js_1.default(225)),
        minGasPrice: constants_1.GWEI.mul(new bn_js_1.default(25)),
        maxGasPrice: constants_1.GWEI.mul(new bn_js_1.default(1000)),
        chainID: 43114
    }
};
/**
 * A class for storing predefined / fetched networks
 */
class Networks {
    constructor() {
        this.registry = new Map();
        this.registerNetwork(constants_1.DefaultNetworkID, AvaxMainNetwork);
        this.registerNetwork(constants_1.TestNetworkID, TestNetwork);
    }
    registerNetwork(networkID, network) {
        this.registry[networkID.toString()] = network;
    }
    getNetwork(networkID) {
        return this.registry[networkID.toString()];
    }
    isPredefined(networkID) {
        var _a, _b;
        return (_b = (_a = this.registry[networkID.toString()]) === null || _a === void 0 ? void 0 : _a.preDefined) !== null && _b !== void 0 ? _b : false;
    }
}
exports.default = new Networks();
//# sourceMappingURL=data:application/json;base64,