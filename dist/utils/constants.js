"use strict";
/**
 * @packageDocumentation
 * @module Utils-Constants
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AVAXSTAKECAP = exports.AVAXGWEI = exports.GWEI = exports.WEI = exports.NANOAVAX = exports.MICROAVAX = exports.MILLIAVAX = exports.CENTIAVAX = exports.DECIAVAX = exports.ONEAVAX = exports.mnemonic = exports.DefaultEVMLocalGenesisAddress = exports.DefaultEVMLocalGenesisPrivateKey = exports.DefaultLocalGenesisPrivateKey2 = exports.DefaultLocalGenesisPrivateKey = exports.DummyPlatformChainID = exports.DummyBlockchainID = exports.TestCChainID = exports.TestCBlockchainID = exports.TestXBlockchainID = exports.DefaultPlatformChainID = exports.TestAvaxAssetID = exports.TestNetworkID = exports.TestHRP = exports.PChainVMName = exports.CChainVMName = exports.XChainVMName = exports.PChainAlias = exports.CChainAlias = exports.XChainAlias = exports.NodeIDPrefix = exports.PrivateKeyPrefix = exports.DefaultTransactionVersionNumber = exports.DefaultNetworkID = void 0;
const bn_js_1 = __importDefault(require("bn.js"));
exports.DefaultNetworkID = 1;
exports.DefaultTransactionVersionNumber = 0;
exports.PrivateKeyPrefix = "PrivateKey-";
exports.NodeIDPrefix = "NodeID-";
exports.XChainAlias = "X";
exports.CChainAlias = "C";
exports.PChainAlias = "P";
exports.XChainVMName = "avm";
exports.CChainVMName = "evm";
exports.PChainVMName = "platformvm";
exports.TestHRP = "local";
exports.TestNetworkID = 12345;
exports.TestAvaxAssetID = "2fombhL7aGPwj3KH4bfrmJwW6PVnMobf9Y2fn9GwxiAAJyFDbe";
exports.DefaultPlatformChainID = "11111111111111111111111111111111LpoYY";
exports.TestXBlockchainID = "2eNy1mUFdmaxXNj1eQHUe7Np4gju9sJsEtWQ4MX3ToiNKuADed";
exports.TestCBlockchainID = "2CA6j5zYzasynPsFeNoqWkmTCt3VScMvXUZHbfDJ8k3oGzAPtU";
exports.TestCChainID = 42112;
exports.DummyBlockchainID = "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa";
exports.DummyPlatformChainID = "11111111111111111111111111111111LpoXX";
// DO NOT use the following private keys and/or mnemonic on Fuji or Testnet
// This address/account is for testing on the local camsh network
exports.DefaultLocalGenesisPrivateKey = "ewoqjP7PxY4yr3iLTpLisriqt94hdyDFNgchSxGGztUrTXtNN";
exports.DefaultLocalGenesisPrivateKey2 = "vmRQiZeXEXYMyJhEiqdC2z5JhuDbxL8ix9UVvjgMu2Er1NepE";
exports.DefaultEVMLocalGenesisPrivateKey = "0x56289e99c94b6912bfc12adc093c9b51124f0dc54ac7a766b2bc5ccf558d8027";
exports.DefaultEVMLocalGenesisAddress = "0x8db97C7cEcE249c2b98bDC0226Cc4C2A57BF52FC";
exports.mnemonic = "output tooth keep tooth bracket fox city sustain blood raise install pond stem reject long scene clap gloom purpose mean music piece unknown light";
exports.ONEAVAX = new bn_js_1.default(1000000000);
exports.DECIAVAX = exports.ONEAVAX.div(new bn_js_1.default(10));
exports.CENTIAVAX = exports.ONEAVAX.div(new bn_js_1.default(100));
exports.MILLIAVAX = exports.ONEAVAX.div(new bn_js_1.default(1000));
exports.MICROAVAX = exports.ONEAVAX.div(new bn_js_1.default(1000000));
exports.NANOAVAX = exports.ONEAVAX.div(new bn_js_1.default(1000000000));
exports.WEI = new bn_js_1.default(1);
exports.GWEI = exports.WEI.mul(new bn_js_1.default(1000000000));
exports.AVAXGWEI = exports.NANOAVAX.clone();
exports.AVAXSTAKECAP = exports.ONEAVAX.mul(new bn_js_1.default(3000000));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3RhbnRzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3V0aWxzL2NvbnN0YW50cy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7OztHQUdHOzs7Ozs7QUFFSCxrREFBc0I7QUFFVCxRQUFBLGdCQUFnQixHQUFHLENBQUMsQ0FBQTtBQUNwQixRQUFBLCtCQUErQixHQUFXLENBQUMsQ0FBQTtBQUUzQyxRQUFBLGdCQUFnQixHQUFXLGFBQWEsQ0FBQTtBQUN4QyxRQUFBLFlBQVksR0FBVyxTQUFTLENBQUE7QUFDaEMsUUFBQSxXQUFXLEdBQVcsR0FBRyxDQUFBO0FBQ3pCLFFBQUEsV0FBVyxHQUFXLEdBQUcsQ0FBQTtBQUN6QixRQUFBLFdBQVcsR0FBVyxHQUFHLENBQUE7QUFDekIsUUFBQSxZQUFZLEdBQVcsS0FBSyxDQUFBO0FBQzVCLFFBQUEsWUFBWSxHQUFXLEtBQUssQ0FBQTtBQUM1QixRQUFBLFlBQVksR0FBVyxZQUFZLENBQUE7QUFFbkMsUUFBQSxPQUFPLEdBQUcsT0FBTyxDQUFBO0FBQ2pCLFFBQUEsYUFBYSxHQUFHLEtBQUssQ0FBQTtBQUNyQixRQUFBLGVBQWUsR0FDMUIsb0RBQW9ELENBQUE7QUFDekMsUUFBQSxzQkFBc0IsR0FDakMsdUNBQXVDLENBQUE7QUFDNUIsUUFBQSxpQkFBaUIsR0FDNUIsb0RBQW9ELENBQUE7QUFDekMsUUFBQSxpQkFBaUIsR0FDNUIsb0RBQW9ELENBQUE7QUFDekMsUUFBQSxZQUFZLEdBQUcsS0FBSyxDQUFBO0FBQ3BCLFFBQUEsaUJBQWlCLEdBQzVCLG9EQUFvRCxDQUFBO0FBQ3pDLFFBQUEsb0JBQW9CLEdBQy9CLHVDQUF1QyxDQUFBO0FBRXpDLDJFQUEyRTtBQUMzRSxpRUFBaUU7QUFDcEQsUUFBQSw2QkFBNkIsR0FDeEMsbURBQW1ELENBQUE7QUFDeEMsUUFBQSw4QkFBOEIsR0FDekMsbURBQW1ELENBQUE7QUFDeEMsUUFBQSxnQ0FBZ0MsR0FDM0Msb0VBQW9FLENBQUE7QUFDekQsUUFBQSw2QkFBNkIsR0FDeEMsNENBQTRDLENBQUE7QUFDakMsUUFBQSxRQUFRLEdBQ25CLG9KQUFvSixDQUFBO0FBRXpJLFFBQUEsT0FBTyxHQUFPLElBQUksZUFBRSxDQUFDLFVBQVUsQ0FBQyxDQUFBO0FBQ2hDLFFBQUEsUUFBUSxHQUFPLGVBQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxlQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQTtBQUN0QyxRQUFBLFNBQVMsR0FBTyxlQUFPLENBQUMsR0FBRyxDQUFDLElBQUksZUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUE7QUFDeEMsUUFBQSxTQUFTLEdBQU8sZUFBTyxDQUFDLEdBQUcsQ0FBQyxJQUFJLGVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFBO0FBQ3pDLFFBQUEsU0FBUyxHQUFPLGVBQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxlQUFFLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQTtBQUM1QyxRQUFBLFFBQVEsR0FBTyxlQUFPLENBQUMsR0FBRyxDQUFDLElBQUksZUFBRSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUE7QUFFOUMsUUFBQSxHQUFHLEdBQU8sSUFBSSxlQUFFLENBQUMsQ0FBQyxDQUFDLENBQUE7QUFDbkIsUUFBQSxJQUFJLEdBQU8sV0FBRyxDQUFDLEdBQUcsQ0FBQyxJQUFJLGVBQUUsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFBO0FBQ3RDLFFBQUEsUUFBUSxHQUFPLGdCQUFRLENBQUMsS0FBSyxFQUFFLENBQUE7QUFDL0IsUUFBQSxZQUFZLEdBQU8sZUFBTyxDQUFDLEdBQUcsQ0FBQyxJQUFJLGVBQUUsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAcGFja2FnZURvY3VtZW50YXRpb25cbiAqIEBtb2R1bGUgVXRpbHMtQ29uc3RhbnRzXG4gKi9cblxuaW1wb3J0IEJOIGZyb20gXCJibi5qc1wiXG5cbmV4cG9ydCBjb25zdCBEZWZhdWx0TmV0d29ya0lEID0gMVxuZXhwb3J0IGNvbnN0IERlZmF1bHRUcmFuc2FjdGlvblZlcnNpb25OdW1iZXI6IG51bWJlciA9IDBcblxuZXhwb3J0IGNvbnN0IFByaXZhdGVLZXlQcmVmaXg6IHN0cmluZyA9IFwiUHJpdmF0ZUtleS1cIlxuZXhwb3J0IGNvbnN0IE5vZGVJRFByZWZpeDogc3RyaW5nID0gXCJOb2RlSUQtXCJcbmV4cG9ydCBjb25zdCBYQ2hhaW5BbGlhczogc3RyaW5nID0gXCJYXCJcbmV4cG9ydCBjb25zdCBDQ2hhaW5BbGlhczogc3RyaW5nID0gXCJDXCJcbmV4cG9ydCBjb25zdCBQQ2hhaW5BbGlhczogc3RyaW5nID0gXCJQXCJcbmV4cG9ydCBjb25zdCBYQ2hhaW5WTU5hbWU6IHN0cmluZyA9IFwiYXZtXCJcbmV4cG9ydCBjb25zdCBDQ2hhaW5WTU5hbWU6IHN0cmluZyA9IFwiZXZtXCJcbmV4cG9ydCBjb25zdCBQQ2hhaW5WTU5hbWU6IHN0cmluZyA9IFwicGxhdGZvcm12bVwiXG5cbmV4cG9ydCBjb25zdCBUZXN0SFJQID0gXCJsb2NhbFwiXG5leHBvcnQgY29uc3QgVGVzdE5ldHdvcmtJRCA9IDEyMzQ1XG5leHBvcnQgY29uc3QgVGVzdEF2YXhBc3NldElEID1cbiAgXCIyZm9tYmhMN2FHUHdqM0tINGJmcm1Kd1c2UFZuTW9iZjlZMmZuOUd3eGlBQUp5RkRiZVwiXG5leHBvcnQgY29uc3QgRGVmYXVsdFBsYXRmb3JtQ2hhaW5JRDogc3RyaW5nID1cbiAgXCIxMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMUxwb1lZXCJcbmV4cG9ydCBjb25zdCBUZXN0WEJsb2NrY2hhaW5JRCA9XG4gIFwiMmVOeTFtVUZkbWF4WE5qMWVRSFVlN05wNGdqdTlzSnNFdFdRNE1YM1RvaU5LdUFEZWRcIlxuZXhwb3J0IGNvbnN0IFRlc3RDQmxvY2tjaGFpbklEID1cbiAgXCIyQ0E2ajV6WXphc3luUHNGZU5vcVdrbVRDdDNWU2NNdlhVWkhiZkRKOGszb0d6QVB0VVwiXG5leHBvcnQgY29uc3QgVGVzdENDaGFpbklEID0gNDIxMTJcbmV4cG9ydCBjb25zdCBEdW1teUJsb2NrY2hhaW5JRCA9XG4gIFwiYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFcIlxuZXhwb3J0IGNvbnN0IER1bW15UGxhdGZvcm1DaGFpbklEOiBzdHJpbmcgPVxuICBcIjExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExTHBvWFhcIlxuXG4vLyBETyBOT1QgdXNlIHRoZSBmb2xsb3dpbmcgcHJpdmF0ZSBrZXlzIGFuZC9vciBtbmVtb25pYyBvbiBGdWppIG9yIFRlc3RuZXRcbi8vIFRoaXMgYWRkcmVzcy9hY2NvdW50IGlzIGZvciB0ZXN0aW5nIG9uIHRoZSBsb2NhbCBjYW1zaCBuZXR3b3JrXG5leHBvcnQgY29uc3QgRGVmYXVsdExvY2FsR2VuZXNpc1ByaXZhdGVLZXk6IHN0cmluZyA9XG4gIFwiZXdvcWpQN1B4WTR5cjNpTFRwTGlzcmlxdDk0aGR5REZOZ2NoU3hHR3p0VXJUWHROTlwiXG5leHBvcnQgY29uc3QgRGVmYXVsdExvY2FsR2VuZXNpc1ByaXZhdGVLZXkyOiBzdHJpbmcgPVxuICBcInZtUlFpWmVYRVhZTXlKaEVpcWRDMno1Smh1RGJ4TDhpeDlVVnZqZ011MkVyMU5lcEVcIlxuZXhwb3J0IGNvbnN0IERlZmF1bHRFVk1Mb2NhbEdlbmVzaXNQcml2YXRlS2V5OiBzdHJpbmcgPVxuICBcIjB4NTYyODllOTljOTRiNjkxMmJmYzEyYWRjMDkzYzliNTExMjRmMGRjNTRhYzdhNzY2YjJiYzVjY2Y1NThkODAyN1wiXG5leHBvcnQgY29uc3QgRGVmYXVsdEVWTUxvY2FsR2VuZXNpc0FkZHJlc3M6IHN0cmluZyA9XG4gIFwiMHg4ZGI5N0M3Y0VjRTI0OWMyYjk4YkRDMDIyNkNjNEMyQTU3QkY1MkZDXCJcbmV4cG9ydCBjb25zdCBtbmVtb25pYzogc3RyaW5nID1cbiAgXCJvdXRwdXQgdG9vdGgga2VlcCB0b290aCBicmFja2V0IGZveCBjaXR5IHN1c3RhaW4gYmxvb2QgcmFpc2UgaW5zdGFsbCBwb25kIHN0ZW0gcmVqZWN0IGxvbmcgc2NlbmUgY2xhcCBnbG9vbSBwdXJwb3NlIG1lYW4gbXVzaWMgcGllY2UgdW5rbm93biBsaWdodFwiXG5cbmV4cG9ydCBjb25zdCBPTkVBVkFYOiBCTiA9IG5ldyBCTigxMDAwMDAwMDAwKVxuZXhwb3J0IGNvbnN0IERFQ0lBVkFYOiBCTiA9IE9ORUFWQVguZGl2KG5ldyBCTigxMCkpXG5leHBvcnQgY29uc3QgQ0VOVElBVkFYOiBCTiA9IE9ORUFWQVguZGl2KG5ldyBCTigxMDApKVxuZXhwb3J0IGNvbnN0IE1JTExJQVZBWDogQk4gPSBPTkVBVkFYLmRpdihuZXcgQk4oMTAwMCkpXG5leHBvcnQgY29uc3QgTUlDUk9BVkFYOiBCTiA9IE9ORUFWQVguZGl2KG5ldyBCTigxMDAwMDAwKSlcbmV4cG9ydCBjb25zdCBOQU5PQVZBWDogQk4gPSBPTkVBVkFYLmRpdihuZXcgQk4oMTAwMDAwMDAwMCkpXG5cbmV4cG9ydCBjb25zdCBXRUk6IEJOID0gbmV3IEJOKDEpXG5leHBvcnQgY29uc3QgR1dFSTogQk4gPSBXRUkubXVsKG5ldyBCTigxMDAwMDAwMDAwKSlcbmV4cG9ydCBjb25zdCBBVkFYR1dFSTogQk4gPSBOQU5PQVZBWC5jbG9uZSgpXG5leHBvcnQgY29uc3QgQVZBWFNUQUtFQ0FQOiBCTiA9IE9ORUFWQVgubXVsKG5ldyBCTigzMDAwMDAwKSlcblxuLyoqXG4gKiBSdWxlcyB1c2VkIHdoZW4gbWVyZ2luZyBzZXRzXG4gKi9cbmV4cG9ydCB0eXBlIE1lcmdlUnVsZSA9XG4gIHwgXCJpbnRlcnNlY3Rpb25cIiAvLyBTZWxmIElOVEVSU0VDVCBOZXdcbiAgfCBcImRpZmZlcmVuY2VTZWxmXCIgLy8gU2VsZiBNSU5VUyBOZXdcbiAgfCBcImRpZmZlcmVuY2VOZXdcIiAvLyBOZXcgTUlOVVMgU2VsZlxuICB8IFwic3ltRGlmZmVyZW5jZVwiIC8vIGRpZmZlcmVuY2VTZWxmIFVOSU9OIGRpZmZlcmVuY2VOZXdcbiAgfCBcInVuaW9uXCIgLy8gU2VsZiBVTklPTiBOZXdcbiAgfCBcInVuaW9uTWludXNOZXdcIiAvLyB1bmlvbiBNSU5VUyBkaWZmZXJlbmNlTmV3XG4gIHwgXCJ1bmlvbk1pbnVzU2VsZlwiIC8vIHVuaW9uIE1JTlVTIGRpZmZlcmVuY2VTZWxmXG4gIHwgXCJFUlJPUlwiIC8vIGdlbmVyYXRlIGVycm9yIGZvciB0ZXN0aW5nXG4iXX0=