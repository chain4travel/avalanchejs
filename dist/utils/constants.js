"use strict";
/**
 * @packageDocumentation
 * @module Utils-Constants
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AVAXSTAKECAP = exports.AVAXGWEI = exports.GWEI = exports.WEI = exports.NANOAVAX = exports.MICROAVAX = exports.MILLIAVAX = exports.CENTIAVAX = exports.DECIAVAX = exports.ONEAVAX = exports.mnemonic = exports.DefaultEVMLocalGenesisAddress = exports.DefaultEVMLocalGenesisPrivateKey = exports.DefaultLocalGenesisPrivateKey2 = exports.DefaultLocalGenesisPrivateKey = exports.DummyPlatformChainID = exports.DummyBlockchainID = exports.TestCChainID = exports.TestCBlockchainID = exports.TestXBlockchainID = exports.DefaultPlatformChainID = exports.TestAvaxAssetID = exports.TestNetworkID = exports.TestHRP = exports.PChainVMName = exports.CChainVMName = exports.XChainVMName = exports.PChainAlias = exports.CChainAlias = exports.XChainAlias = exports.NodeIDPrefix = exports.PrivateKeyPrefix = exports.DefaultNetworkID = void 0;
const bn_js_1 = __importDefault(require("bn.js"));
exports.DefaultNetworkID = 1;
exports.PrivateKeyPrefix = "PrivateKey-";
exports.NodeIDPrefix = "NodeID-";
exports.XChainAlias = "X";
exports.CChainAlias = "C";
exports.PChainAlias = "P";
exports.XChainVMName = "avm";
exports.CChainVMName = "evm";
exports.PChainVMName = "platformvm";
exports.TestHRP = "local";
exports.TestNetworkID = 12345;
exports.TestAvaxAssetID = "2fombhL7aGPwj3KH4bfrmJwW6PVnMobf9Y2fn9GwxiAAJyFDbe";
exports.DefaultPlatformChainID = "11111111111111111111111111111111LpoYY";
exports.TestXBlockchainID = "2eNy1mUFdmaxXNj1eQHUe7Np4gju9sJsEtWQ4MX3ToiNKuADed";
exports.TestCBlockchainID = "2CA6j5zYzasynPsFeNoqWkmTCt3VScMvXUZHbfDJ8k3oGzAPtU";
exports.TestCChainID = 42112;
exports.DummyBlockchainID = "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa";
exports.DummyPlatformChainID = "11111111111111111111111111111111LpoXX";
// DO NOT use the following private keys and/or mnemonic on Fuji or Testnet
// This address/account is for testing on the local camsh network
exports.DefaultLocalGenesisPrivateKey = "ewoqjP7PxY4yr3iLTpLisriqt94hdyDFNgchSxGGztUrTXtNN";
exports.DefaultLocalGenesisPrivateKey2 = "vmRQiZeXEXYMyJhEiqdC2z5JhuDbxL8ix9UVvjgMu2Er1NepE";
exports.DefaultEVMLocalGenesisPrivateKey = "0x56289e99c94b6912bfc12adc093c9b51124f0dc54ac7a766b2bc5ccf558d8027";
exports.DefaultEVMLocalGenesisAddress = "0x8db97C7cEcE249c2b98bDC0226Cc4C2A57BF52FC";
exports.mnemonic = "output tooth keep tooth bracket fox city sustain blood raise install pond stem reject long scene clap gloom purpose mean music piece unknown light";
exports.ONEAVAX = new bn_js_1.default(1000000000);
exports.DECIAVAX = exports.ONEAVAX.div(new bn_js_1.default(10));
exports.CENTIAVAX = exports.ONEAVAX.div(new bn_js_1.default(100));
exports.MILLIAVAX = exports.ONEAVAX.div(new bn_js_1.default(1000));
exports.MICROAVAX = exports.ONEAVAX.div(new bn_js_1.default(1000000));
exports.NANOAVAX = exports.ONEAVAX.div(new bn_js_1.default(1000000000));
exports.WEI = new bn_js_1.default(1);
exports.GWEI = exports.WEI.mul(new bn_js_1.default(1000000000));
exports.AVAXGWEI = exports.NANOAVAX.clone();
exports.AVAXSTAKECAP = exports.ONEAVAX.mul(new bn_js_1.default(3000000));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uc3RhbnRzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3V0aWxzL2NvbnN0YW50cy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7OztHQUdHOzs7Ozs7QUFFSCxrREFBc0I7QUFFVCxRQUFBLGdCQUFnQixHQUFHLENBQUMsQ0FBQTtBQUVwQixRQUFBLGdCQUFnQixHQUFXLGFBQWEsQ0FBQTtBQUN4QyxRQUFBLFlBQVksR0FBVyxTQUFTLENBQUE7QUFDaEMsUUFBQSxXQUFXLEdBQVcsR0FBRyxDQUFBO0FBQ3pCLFFBQUEsV0FBVyxHQUFXLEdBQUcsQ0FBQTtBQUN6QixRQUFBLFdBQVcsR0FBVyxHQUFHLENBQUE7QUFDekIsUUFBQSxZQUFZLEdBQVcsS0FBSyxDQUFBO0FBQzVCLFFBQUEsWUFBWSxHQUFXLEtBQUssQ0FBQTtBQUM1QixRQUFBLFlBQVksR0FBVyxZQUFZLENBQUE7QUFFbkMsUUFBQSxPQUFPLEdBQUcsT0FBTyxDQUFBO0FBQ2pCLFFBQUEsYUFBYSxHQUFHLEtBQUssQ0FBQTtBQUNyQixRQUFBLGVBQWUsR0FDMUIsb0RBQW9ELENBQUE7QUFDekMsUUFBQSxzQkFBc0IsR0FDakMsdUNBQXVDLENBQUE7QUFDNUIsUUFBQSxpQkFBaUIsR0FDNUIsb0RBQW9ELENBQUE7QUFDekMsUUFBQSxpQkFBaUIsR0FDNUIsb0RBQW9ELENBQUE7QUFDekMsUUFBQSxZQUFZLEdBQUcsS0FBSyxDQUFBO0FBQ3BCLFFBQUEsaUJBQWlCLEdBQzVCLG9EQUFvRCxDQUFBO0FBQ3pDLFFBQUEsb0JBQW9CLEdBQy9CLHVDQUF1QyxDQUFBO0FBRXpDLDJFQUEyRTtBQUMzRSxpRUFBaUU7QUFDcEQsUUFBQSw2QkFBNkIsR0FDeEMsbURBQW1ELENBQUE7QUFDeEMsUUFBQSw4QkFBOEIsR0FDekMsbURBQW1ELENBQUE7QUFDeEMsUUFBQSxnQ0FBZ0MsR0FDM0Msb0VBQW9FLENBQUE7QUFDekQsUUFBQSw2QkFBNkIsR0FDeEMsNENBQTRDLENBQUE7QUFDakMsUUFBQSxRQUFRLEdBQ25CLG9KQUFvSixDQUFBO0FBRXpJLFFBQUEsT0FBTyxHQUFPLElBQUksZUFBRSxDQUFDLFVBQVUsQ0FBQyxDQUFBO0FBQ2hDLFFBQUEsUUFBUSxHQUFPLGVBQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxlQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQTtBQUN0QyxRQUFBLFNBQVMsR0FBTyxlQUFPLENBQUMsR0FBRyxDQUFDLElBQUksZUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUE7QUFDeEMsUUFBQSxTQUFTLEdBQU8sZUFBTyxDQUFDLEdBQUcsQ0FBQyxJQUFJLGVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFBO0FBQ3pDLFFBQUEsU0FBUyxHQUFPLGVBQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxlQUFFLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQTtBQUM1QyxRQUFBLFFBQVEsR0FBTyxlQUFPLENBQUMsR0FBRyxDQUFDLElBQUksZUFBRSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUE7QUFFOUMsUUFBQSxHQUFHLEdBQU8sSUFBSSxlQUFFLENBQUMsQ0FBQyxDQUFDLENBQUE7QUFDbkIsUUFBQSxJQUFJLEdBQU8sV0FBRyxDQUFDLEdBQUcsQ0FBQyxJQUFJLGVBQUUsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFBO0FBQ3RDLFFBQUEsUUFBUSxHQUFPLGdCQUFRLENBQUMsS0FBSyxFQUFFLENBQUE7QUFDL0IsUUFBQSxZQUFZLEdBQU8sZUFBTyxDQUFDLEdBQUcsQ0FBQyxJQUFJLGVBQUUsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAcGFja2FnZURvY3VtZW50YXRpb25cbiAqIEBtb2R1bGUgVXRpbHMtQ29uc3RhbnRzXG4gKi9cblxuaW1wb3J0IEJOIGZyb20gXCJibi5qc1wiXG5cbmV4cG9ydCBjb25zdCBEZWZhdWx0TmV0d29ya0lEID0gMVxuXG5leHBvcnQgY29uc3QgUHJpdmF0ZUtleVByZWZpeDogc3RyaW5nID0gXCJQcml2YXRlS2V5LVwiXG5leHBvcnQgY29uc3QgTm9kZUlEUHJlZml4OiBzdHJpbmcgPSBcIk5vZGVJRC1cIlxuZXhwb3J0IGNvbnN0IFhDaGFpbkFsaWFzOiBzdHJpbmcgPSBcIlhcIlxuZXhwb3J0IGNvbnN0IENDaGFpbkFsaWFzOiBzdHJpbmcgPSBcIkNcIlxuZXhwb3J0IGNvbnN0IFBDaGFpbkFsaWFzOiBzdHJpbmcgPSBcIlBcIlxuZXhwb3J0IGNvbnN0IFhDaGFpblZNTmFtZTogc3RyaW5nID0gXCJhdm1cIlxuZXhwb3J0IGNvbnN0IENDaGFpblZNTmFtZTogc3RyaW5nID0gXCJldm1cIlxuZXhwb3J0IGNvbnN0IFBDaGFpblZNTmFtZTogc3RyaW5nID0gXCJwbGF0Zm9ybXZtXCJcblxuZXhwb3J0IGNvbnN0IFRlc3RIUlAgPSBcImxvY2FsXCJcbmV4cG9ydCBjb25zdCBUZXN0TmV0d29ya0lEID0gMTIzNDVcbmV4cG9ydCBjb25zdCBUZXN0QXZheEFzc2V0SUQgPVxuICBcIjJmb21iaEw3YUdQd2ozS0g0YmZybUp3VzZQVm5Nb2JmOVkyZm45R3d4aUFBSnlGRGJlXCJcbmV4cG9ydCBjb25zdCBEZWZhdWx0UGxhdGZvcm1DaGFpbklEOiBzdHJpbmcgPVxuICBcIjExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExTHBvWVlcIlxuZXhwb3J0IGNvbnN0IFRlc3RYQmxvY2tjaGFpbklEID1cbiAgXCIyZU55MW1VRmRtYXhYTmoxZVFIVWU3TnA0Z2p1OXNKc0V0V1E0TVgzVG9pTkt1QURlZFwiXG5leHBvcnQgY29uc3QgVGVzdENCbG9ja2NoYWluSUQgPVxuICBcIjJDQTZqNXpZemFzeW5Qc0ZlTm9xV2ttVEN0M1ZTY012WFVaSGJmREo4azNvR3pBUHRVXCJcbmV4cG9ydCBjb25zdCBUZXN0Q0NoYWluSUQgPSA0MjExMlxuZXhwb3J0IGNvbnN0IER1bW15QmxvY2tjaGFpbklEID1cbiAgXCJhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYVwiXG5leHBvcnQgY29uc3QgRHVtbXlQbGF0Zm9ybUNoYWluSUQ6IHN0cmluZyA9XG4gIFwiMTExMTExMTExMTExMTExMTExMTExMTExMTExMTExMTFMcG9YWFwiXG5cbi8vIERPIE5PVCB1c2UgdGhlIGZvbGxvd2luZyBwcml2YXRlIGtleXMgYW5kL29yIG1uZW1vbmljIG9uIEZ1amkgb3IgVGVzdG5ldFxuLy8gVGhpcyBhZGRyZXNzL2FjY291bnQgaXMgZm9yIHRlc3Rpbmcgb24gdGhlIGxvY2FsIGNhbXNoIG5ldHdvcmtcbmV4cG9ydCBjb25zdCBEZWZhdWx0TG9jYWxHZW5lc2lzUHJpdmF0ZUtleTogc3RyaW5nID1cbiAgXCJld29xalA3UHhZNHlyM2lMVHBMaXNyaXF0OTRoZHlERk5nY2hTeEdHenRVclRYdE5OXCJcbmV4cG9ydCBjb25zdCBEZWZhdWx0TG9jYWxHZW5lc2lzUHJpdmF0ZUtleTI6IHN0cmluZyA9XG4gIFwidm1SUWlaZVhFWFlNeUpoRWlxZEMyejVKaHVEYnhMOGl4OVVWdmpnTXUyRXIxTmVwRVwiXG5leHBvcnQgY29uc3QgRGVmYXVsdEVWTUxvY2FsR2VuZXNpc1ByaXZhdGVLZXk6IHN0cmluZyA9XG4gIFwiMHg1NjI4OWU5OWM5NGI2OTEyYmZjMTJhZGMwOTNjOWI1MTEyNGYwZGM1NGFjN2E3NjZiMmJjNWNjZjU1OGQ4MDI3XCJcbmV4cG9ydCBjb25zdCBEZWZhdWx0RVZNTG9jYWxHZW5lc2lzQWRkcmVzczogc3RyaW5nID1cbiAgXCIweDhkYjk3QzdjRWNFMjQ5YzJiOThiREMwMjI2Q2M0QzJBNTdCRjUyRkNcIlxuZXhwb3J0IGNvbnN0IG1uZW1vbmljOiBzdHJpbmcgPVxuICBcIm91dHB1dCB0b290aCBrZWVwIHRvb3RoIGJyYWNrZXQgZm94IGNpdHkgc3VzdGFpbiBibG9vZCByYWlzZSBpbnN0YWxsIHBvbmQgc3RlbSByZWplY3QgbG9uZyBzY2VuZSBjbGFwIGdsb29tIHB1cnBvc2UgbWVhbiBtdXNpYyBwaWVjZSB1bmtub3duIGxpZ2h0XCJcblxuZXhwb3J0IGNvbnN0IE9ORUFWQVg6IEJOID0gbmV3IEJOKDEwMDAwMDAwMDApXG5leHBvcnQgY29uc3QgREVDSUFWQVg6IEJOID0gT05FQVZBWC5kaXYobmV3IEJOKDEwKSlcbmV4cG9ydCBjb25zdCBDRU5USUFWQVg6IEJOID0gT05FQVZBWC5kaXYobmV3IEJOKDEwMCkpXG5leHBvcnQgY29uc3QgTUlMTElBVkFYOiBCTiA9IE9ORUFWQVguZGl2KG5ldyBCTigxMDAwKSlcbmV4cG9ydCBjb25zdCBNSUNST0FWQVg6IEJOID0gT05FQVZBWC5kaXYobmV3IEJOKDEwMDAwMDApKVxuZXhwb3J0IGNvbnN0IE5BTk9BVkFYOiBCTiA9IE9ORUFWQVguZGl2KG5ldyBCTigxMDAwMDAwMDAwKSlcblxuZXhwb3J0IGNvbnN0IFdFSTogQk4gPSBuZXcgQk4oMSlcbmV4cG9ydCBjb25zdCBHV0VJOiBCTiA9IFdFSS5tdWwobmV3IEJOKDEwMDAwMDAwMDApKVxuZXhwb3J0IGNvbnN0IEFWQVhHV0VJOiBCTiA9IE5BTk9BVkFYLmNsb25lKClcbmV4cG9ydCBjb25zdCBBVkFYU1RBS0VDQVA6IEJOID0gT05FQVZBWC5tdWwobmV3IEJOKDMwMDAwMDApKVxuXG4vKipcbiAqIFJ1bGVzIHVzZWQgd2hlbiBtZXJnaW5nIHNldHNcbiAqL1xuZXhwb3J0IHR5cGUgTWVyZ2VSdWxlID1cbiAgfCBcImludGVyc2VjdGlvblwiIC8vIFNlbGYgSU5URVJTRUNUIE5ld1xuICB8IFwiZGlmZmVyZW5jZVNlbGZcIiAvLyBTZWxmIE1JTlVTIE5ld1xuICB8IFwiZGlmZmVyZW5jZU5ld1wiIC8vIE5ldyBNSU5VUyBTZWxmXG4gIHwgXCJzeW1EaWZmZXJlbmNlXCIgLy8gZGlmZmVyZW5jZVNlbGYgVU5JT04gZGlmZmVyZW5jZU5ld1xuICB8IFwidW5pb25cIiAvLyBTZWxmIFVOSU9OIE5ld1xuICB8IFwidW5pb25NaW51c05ld1wiIC8vIHVuaW9uIE1JTlVTIGRpZmZlcmVuY2VOZXdcbiAgfCBcInVuaW9uTWludXNTZWxmXCIgLy8gdW5pb24gTUlOVVMgZGlmZmVyZW5jZVNlbGZcbiAgfCBcIkVSUk9SXCIgLy8gZ2VuZXJhdGUgZXJyb3IgZm9yIHRlc3RpbmdcbiJdfQ==